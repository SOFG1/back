"""directory_first_class_citizen

Revision ID: fd1053375508
Revises: 4f5db1227088
Create Date: 2024-09-23 19:04:03.026297

"""

from collections.abc import Sequence
from uuid import UUID

import sqlalchemy as sa
import uuid6
from alembic import op
from sqlmodel.sql.sqltypes import AutoString

# revision identifiers, used by Alembic.
revision: str = "fd1053375508"
down_revision: str | None = "4f5db1227088"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def create_directory_hierarchy(connection: sa.Connection, owner_id: UUID, directory_path: str) -> None:
    # Split the directory path into its components
    parts = [part for part in directory_path.split("/") if part]
    parent_id = None  # Start with no parent (root)

    canonical = "/"
    for part in parts:
        canonical = f'{canonical.rstrip("/")}/{part}'

        # Check if this directory already exists
        result = connection.execute(
            sa.text("""
                SELECT id FROM directory
                WHERE owner_id = :owner_id
                  AND canonical = :canonical
            """),
            {"owner_id": owner_id, "canonical": canonical},
        )
        directory_id: UUID | None = result.scalar()

        # If the directory doesn't exist, create it
        if directory_id is None:
            directory_id = uuid6.uuid7()  # Generate a new UUID for the directory
            connection.execute(
                sa.text("""
                    INSERT INTO directory (id, owner_id, parent_id, name, canonical)
                    VALUES (:id, :owner_id, :parent_id, :name, :canonical)
                """),
                {
                    "id": directory_id,
                    "owner_id": owner_id,
                    "parent_id": parent_id,  # This is the parent directory
                    "name": part,
                    "canonical": canonical,
                },
            )

        # Set the current directory as the parent for the next level
        parent_id = directory_id


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("""
        UPDATE fileuser
        SET directory = '/'
        WHERE directory = '.';
        """)
    op.execute("""
        UPDATE fileuser
        SET directory = CASE
            WHEN directory IS NOT NULL AND LEFT(directory, 1) != '/' THEN '/' || directory
            ELSE directory
        END;
        """)

    op.create_table(
        "directory",
        sa.Column("name", AutoString(length=128), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("modified", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("owner_id", sa.Uuid(), nullable=False),
        sa.Column("parent_id", sa.Uuid(), nullable=True),
        sa.Column("canonical", AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"]),
        sa.ForeignKeyConstraint(["parent_id"], ["directory.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("owner_id", "canonical", name="_user_directory_uc"),
    )

    # Create root directory for all users
    connection = op.get_bind()
    result = connection.execute(sa.text('SELECT COUNT(*) FROM "user"'))
    user_row_count = result.scalar() if result is not None else 0
    assert user_row_count is not None
    assert isinstance(user_row_count, int)
    if user_row_count > 0:
        op.execute(
            sa.text("""
                WITH user_rows AS (
                    SELECT
                        id,
                        ROW_NUMBER() OVER () AS rownum
                    FROM "user"
                ),
                uuid_rows AS (
                    SELECT
                        id,
                        rownum
                    FROM UNNEST(:uuid_list)
                    WITH ORDINALITY AS t(id, rownum)
                )
                INSERT INTO directory (id, owner_id, name, canonical)
                SELECT
                    uuid_rows.id,
                    user_rows.id,
                    '/',
                    '/'
                FROM user_rows
                JOIN uuid_rows ON user_rows.rownum = uuid_rows.rownum;
            """).bindparams(uuid_list=[uuid6.uuid7() for _ in range(user_row_count)])
        )

    # Add directory_id to fileuser and create directory hierarchy
    op.add_column("fileuser", sa.Column("directory_id", sa.Uuid(), nullable=True))

    result = connection.execute(
        sa.text("""
            SELECT owner_id, directory FROM fileuser WHERE directory IS NOT NULL
        """)
    )
    fileuser_rows = result.all() if result is not None else []

    # Process each fileuser row
    for owner_id, directory in fileuser_rows:
        create_directory_hierarchy(connection, owner_id, directory)

    op.execute("""
        UPDATE fileuser
        SET directory_id = directory.id
        FROM directory
        WHERE fileuser.owner_id = directory.owner_id
        AND fileuser.directory = directory.canonical;
        """)
    op.alter_column("fileuser", "directory_id", nullable=False)
    op.drop_constraint("_user_directory_file_name_location_uc", "fileuser", type_="unique")
    op.create_unique_constraint(
        "_user_directory_file_name_location_uc", "fileuser", ["owner_id", "directory_id", "file_name"]
    )
    op.create_foreign_key("fileuser_directory_id_fkey", "fileuser", "directory", ["directory_id"], ["id"])
    op.drop_column("fileuser", "directory")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("fileuser", sa.Column("directory", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint("fileuser_directory_id_fkey", "fileuser", type_="foreignkey")
    op.drop_constraint("_user_directory_file_name_location_uc", "fileuser", type_="unique")
    op.create_unique_constraint(
        "_user_directory_file_name_location_uc", "fileuser", ["owner_id", "directory", "file_name"]
    )
    op.drop_column("fileuser", "directory_id")
    op.drop_table("directory")

    op.execute("""
        UPDATE fileuser
        SET directory = '.'
        WHERE directory = '/';
        """)
    # ### end Alembic commands ###
