"""groups

Revision ID: 941c40effa7c
Revises: 5361409361fc
Create Date: 2024-08-27 08:34:30.090130

"""

from collections.abc import Sequence

import sqlalchemy as sa
import uuid6
from alembic import op
from sqlmodel.sql.sqltypes import AutoString

from app.api.models import ADMIN_ID

# revision identifiers, used by Alembic.
revision: str = "941c40effa7c"
down_revision: str | None = "5361409361fc"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "group",
        sa.Column("name", AutoString(length=100), nullable=False),
        sa.Column("description", AutoString(length=1000), nullable=False),
        sa.Column("icon", AutoString(length=25), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("creation_time", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "fileuser",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("creation_time", sa.DateTime(), nullable=True),
        sa.Column("modification_time", sa.DateTime(), nullable=True),
        sa.Column("owner_id", sa.Uuid(), nullable=False, server_default=str(ADMIN_ID)),
        sa.Column("file_name", AutoString(), nullable=False),
        sa.Column("directory", AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], name="fileuser_owner_id_fkey"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("owner_id", "directory", "file_name", name="_user_directory_file_name_location_uc"),
    )
    connection = op.get_bind()
    result = connection.execute(sa.text("SELECT COUNT(*) FROM file"))
    file_row_count = result.scalar() if result is not None else 0
    assert file_row_count is not None
    assert isinstance(file_row_count, int)
    if file_row_count > 0:
        op.execute(
            sa.text("""
                WITH file_rows AS (
                    SELECT
                        ROW_NUMBER() OVER () AS rownum,
                        creation_time,
                        file_name
                    FROM file
                ),
                uuid_rows AS (
                    SELECT
                        id,
                        rownum
                    FROM UNNEST(:uuid_list)
                    WITH ORDINALITY AS t(id, rownum)
                )
                INSERT INTO fileuser (id, creation_time, modification_time, owner_id, file_name, directory)
                SELECT
                    uuid_rows.id,
                    file_rows.creation_time,
                    file_rows.creation_time,
                    :admin_id,
                    file_rows.file_name,
                    ''
                FROM file_rows
                JOIN uuid_rows ON file_rows.rownum = uuid_rows.rownum
            """).bindparams(admin_id=str(ADMIN_ID), uuid_list=[uuid6.uuid7() for _ in range(file_row_count)])
        )
    op.create_table(
        "usergrouplink",
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("group_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
        sa.PrimaryKeyConstraint("user_id", "group_id"),
    )
    op.create_table(
        "filefileuserlink",
        sa.Column("file_user_id", sa.Uuid(), nullable=False),
        sa.Column("file_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["file_id"], ["file.id"]),
        sa.ForeignKeyConstraint(["file_user_id"], ["fileuser.id"]),
        sa.PrimaryKeyConstraint("file_user_id", "file_id"),
    )
    op.execute("""
        WITH cte_file AS (
            SELECT id, file_name
            FROM file
        ),
        cte_file_user AS (
            SELECT id, file_name
            FROM fileuser
        )
        INSERT INTO filefileuserlink (file_id, file_user_id)
        SELECT cte_file.id, cte_file_user.id
        FROM cte_file
        JOIN cte_file_user ON cte_file.file_name = cte_file_user.file_name;
        """)
    op.create_table(
        "chatbotfileuserlink",
        sa.Column("chatbot_id", sa.Uuid(), nullable=False),
        sa.Column("file_user_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["chatbot_id"], ["chatbot.id"]),
        sa.ForeignKeyConstraint(["file_user_id"], ["fileuser.id"]),
        sa.PrimaryKeyConstraint("chatbot_id", "file_user_id"),
    )
    op.execute("""
        WITH cte_chatbot AS (
            SELECT chatbot_id, file_id
            FROM chatbotfilelink
        ),
        cte_file_link AS (
            SELECT file_id, file_user_id
            FROM filefileuserlink
        )
        INSERT INTO chatbotfileuserlink (chatbot_id, file_user_id)
        SELECT cte_chatbot.chatbot_id, cte_file_link.file_user_id
        FROM cte_chatbot
        JOIN cte_file_link ON cte_chatbot.file_id = cte_file_link.file_id
        """)
    op.create_table(
        "groupchatbotlink",
        sa.Column("group_id", sa.Uuid(), nullable=False),
        sa.Column("chatbot_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["chatbot_id"], ["chatbot.id"]),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"]),
        sa.PrimaryKeyConstraint("group_id", "chatbot_id"),
    )
    op.create_table(
        "userchatbotlink",
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("chatbot_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["chatbot_id"], ["chatbot.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
        sa.PrimaryKeyConstraint("user_id", "chatbot_id"),
    )
    op.execute(
        sa.text("""
            INSERT INTO userchatbotlink (user_id, chatbot_id)
            SELECT :admin_id, id
            FROM chatbot
        """).bindparams(admin_id=str(ADMIN_ID))
    )
    op.create_table(
        "userfilelink",
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("file_user_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["file_user_id"], ["fileuser.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
        sa.PrimaryKeyConstraint("user_id", "file_user_id"),
    )
    op.execute(
        sa.text("""
            INSERT INTO userfilelink (user_id, file_user_id)
            SELECT :admin_id, id
            FROM fileuser
        """).bindparams(admin_id=str(ADMIN_ID))
    )
    op.create_table(
        "usersharedlink",
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("chatbot_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["chatbot_id"], ["chatbot.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"]),
        sa.PrimaryKeyConstraint("user_id", "chatbot_id"),
    )
    op.drop_table("chatbotfilelink")
    op.add_column("chatbot", sa.Column("owner_id", sa.Uuid(), nullable=False, server_default=str(ADMIN_ID)))
    op.drop_constraint("chatbot_name_key", "chatbot", type_="unique")
    op.create_unique_constraint("_user_chatbot_name_uc", "chatbot", ["owner_id", "name"])
    op.create_foreign_key("chatbot_owner_id_fkey", "chatbot", "user", ["owner_id"], ["id"])
    op.drop_column("file", "file_name")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # NOTE: data is not being migrated ocrrectly
    op.add_column("file", sa.Column("file_name", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint("chatbot_owner_id_fkey", "chatbot", type_="foreignkey")
    op.drop_constraint("_user_chatbot_name_uc", "chatbot", type_="unique")
    op.create_unique_constraint("chatbot_name_key", "chatbot", ["name"])
    op.drop_column("chatbot", "owner_id")
    op.create_table(
        "chatbotfilelink",
        sa.Column("chatbot_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("file_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["chatbot_id"], ["chatbot.id"], name="chatbotfilelink_chatbot_id_fkey"),
        sa.ForeignKeyConstraint(["file_id"], ["file.id"], name="chatbotfilelink_file_id_fkey"),
        sa.PrimaryKeyConstraint("chatbot_id", "file_id", name="chatbotfilelink_pkey"),
    )
    op.drop_table("usersharedlink")
    op.drop_table("userfilelink")
    op.drop_table("userchatbotlink")
    op.drop_table("groupchatbotlink")
    op.drop_table("filefileuserlink")
    op.drop_table("chatbotfileuserlink")
    op.drop_table("usergrouplink")
    op.drop_table("fileuser")
    op.drop_table("group")
    # ### end Alembic commands ###
